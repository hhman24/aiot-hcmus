/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 30.08.2023 08:22:02

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1344;
#else
constexpr int kTensorArenaSize = 320;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[5];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,63 } };
const TfArray<1, float> quant0_scale = { 1, { 0.16701388359069824, } };
const TfArray<1, int> quant0_zero = { 1, { -101 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -34, 34, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00037706244620494545, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[2*10] = { 
  -46, -50, -70, -49, -106, 95, 92, -117, 110, -127, 
  -73, -122, -117, -97, -69, 74, -43, -20, -54, -47, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 2,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0058226729743182659, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[10] = { 80, 20, 88, -46, -59, -8, -36, 52, 16, 24, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00036994382389821112, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[10*10] = { 
  73, 0, -76, 45, 44, 15, -70, -45, 29, 27, 
  78, 63, -73, -27, 69, -71, 61, -72, -65, 58, 
  -59, 23, -74, 90, 37, 88, 81, -79, 88, 11, 
  26, -35, -41, -39, -22, -11, 99, 18, 66, -88, 
  42, -99, -92, 52, -7, 8, -30, -91, -80, -54, 
  -20, 54, 9, -77, 17, -52, 56, -77, -14, 22, 
  95, 67, 85, 39, 37, 10, 96, -18, 51, -4, 
  -32, -121, 67, 15, 40, 22, 5, 104, -59, 83, 
  108, 127, -19, -62, -41, 42, 52, 46, -58, -64, 
  -88, -32, 25, -82, 63, 71, 10, 102, 14, 15, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,10 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0058398675173521042, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[10] = { 133, 465, -1, -57, 36, 94, 96, 69, 71, -39, };
const TfArray<1, int> tensor_dimension5 = { 1, { 10 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00030708970734849572, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[10*20] = { 
  83, -72, -67, 0, 111, -8, 113, -96, -2, -49, 36, 36, 56, 127, 46, -80, -2, -16, -84, 36, 
  25, -92, 49, 70, 100, -42, -32, -78, -70, 44, 12, 22, 68, 66, 34, 71, -35, 61, -52, 20, 
  -22, -95, -3, 104, -48, -58, -35, 21, -41, -11, 30, 48, -20, -86, -13, -69, 84, -96, -98, -79, 
  56, 4, 93, -15, -66, 44, -66, -49, -35, 69, 92, 40, -77, -101, -8, -47, -30, -61, 100, 77, 
  -45, 71, -93, -11, -79, 103, -27, 30, -86, 64, 88, 50, -12, 48, 24, -93, -42, 100, 76, 64, 
  -78, 76, -71, 48, -24, -117, -4, 84, -110, -44, 83, 69, -49, 69, -21, -67, -35, 67, -65, 10, 
  96, 49, -58, -96, 89, 58, 9, -30, -30, -2, 69, 52, -81, -26, 6, -21, 53, -11, -24, -32, 
  -13, 104, 48, 88, -19, 118, 95, -104, 122, -24, -55, 103, 75, -36, -95, 54, 93, 14, 21, 93, 
  81, 43, 52, 36, 96, 24, -113, -20, -34, 7, 93, 26, -12, -96, -40, 90, -83, 65, -56, -24, 
  24, -67, -14, 11, 68, 126, -17, 10, 81, -79, -64, 39, -56, -63, 64, -16, -2, 93, 22, 87, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 10,20 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0038651148788630962, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[20] = { 55, 7, -13, 91, 80, 176, 39, -78, 30, -23, 53, 68, 46, 107, -41, -7, 36, 21, 28, 72, };
const TfArray<1, int> tensor_dimension7 = { 1, { 20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.00045473902719095349, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[20*63] = { 
  33, 7, 1, 88, 30, 62, 42, -47, 50, -68, 5, 41, -81, -61, -17, 88, 25, 71, -47, -47, 83, -6, 86, 39, -80, 71, -36, -45, -63, -85, 20, 28, 56, -81, -92, 41, -64, 65, -14, -66, 39, -10, -35, -61, -124, 88, -34, 114, -40, -51, 5, -75, 53, -10, -72, 69, 99, 77, 102, 65, 41, -36, 13, 
  -115, -31, 83, 13, -22, -5, 12, 11, 20, 73, -79, 24, 0, 4, 42, -69, 62, 33, 84, -71, -28, -16, 87, -13, 53, 51, -34, 64, -34, -82, -20, 83, 76, 81, 53, -42, -85, -14, 20, -54, -47, -64, 73, 83, 74, -22, 81, -94, -12, -14, -109, -28, -16, -56, -31, -116, -107, 62, 63, -99, -32, 52, -53, 
  61, -15, -86, -71, 40, -49, 62, 84, 95, -6, -71, 18, -69, 49, -55, 70, 34, 60, 4, 44, 99, -93, 56, -78, 10, -27, 95, 50, -48, -74, -47, 66, 52, -68, -16, -30, -81, -4, 58, -72, 52, 53, -93, -14, 33, -19, -48, -76, 37, -23, 52, -20, -15, 1, 53, -78, 13, 16, 13, -24, 92, -31, -13, 
  -93, 22, -39, 71, 2, 23, -31, 73, 15, -104, 54, 52, 20, 37, 14, -49, -97, -70, 9, 41, -84, 48, -57, -35, 72, 60, -98, 55, 61, 44, -56, 27, 62, -66, 36, -11, 76, -111, -1, 46, -101, 39, -17, 87, 107, -55, 21, -98, 36, 38, -87, -24, -46, -127, -6, -102, -109, -122, -68, -44, 63, 10, 63, 
  98, 30, 26, -46, -61, -51, 101, -4, -23, 77, -6, 41, -62, -50, -70, 47, 48, 57, -16, -33, -21, 102, -17, -15, -17, 20, 91, 72, -81, -87, 25, -80, 72, -80, -41, -59, -44, -105, 7, 44, -4, 17, -67, -53, 32, -51, 76, 81, 0, 81, 81, 88, -55, -4, -5, 117, 83, 95, 106, 81, -74, -75, 99, 
  -22, 38, 29, 24, -6, -105, -15, 73, -68, -4, -117, -63, -124, 18, -14, -31, -115, 2, -58, -17, -101, -39, 15, -49, 99, -3, 5, -26, -65, 75, -39, -32, 53, -88, -6, -119, 41, -81, 14, 58, 42, 10, -75, -22, 26, -49, -13, -103, -27, 47, 59, -40, 3, -68, 16, 30, 6, -39, 25, -26, -4, -121, 37, 
  61, -26, -26, -46, -54, -76, -21, 83, -17, 17, 9, 1, -1, 55, 40, -15, -43, -50, 94, 73, -49, 26, -37, 72, -33, -3, 114, -80, 84, 28, 59, -98, -1, -11, -76, 56, -92, 36, -82, 97, -12, 19, 8, -13, -45, -80, 95, -33, 6, -12, -52, 91, -67, 79, 52, 2, 14, 85, 61, -23, -54, 16, 80, 
  53, -104, 15, 69, 70, 19, 20, 29, -42, 82, -19, 99, -27, 47, -56, -86, -23, -43, -57, 101, 90, -77, -56, -9, -37, 75, -30, 33, -85, -5, 33, 101, 32, -76, -26, -81, -6, 38, 78, -22, -6, 39, 79, 104, 39, -21, 12, -104, -76, 34, -83, -36, -27, 11, -31, -59, -80, 73, 69, -94, -59, -25, 57, 
  40, 78, 69, -13, -81, 52, -20, -67, -18, -24, -2, 52, 49, -43, 8, -50, 33, -53, 89, 13, 82, 64, 97, 52, 63, 61, 63, -14, 75, -90, 50, -98, -19, -7, -86, -33, -90, 78, -69, 5, -54, -55, -105, -38, -68, 33, -30, -24, -61, 21, -101, -104, 88, -69, 42, 39, 5, 38, -18, -45, 55, -29, 75, 
  -84, 41, -90, -9, -59, 62, -84, 4, -49, -93, -79, -63, -93, -21, -58, 81, -6, 61, 73, -58, -16, 61, 14, 82, 96, 65, 9, 34, 2, 49, -38, -23, -67, 1, 72, 34, 70, 78, -10, 18, 25, 45, -58, 37, -50, -99, 69, 43, 88, -70, 56, 98, -90, -88, -54, 22, 60, 15, -85, 33, -83, -49, -64, 
  111, 30, 41, -81, -62, -28, 68, 28, 7, 42, -65, 37, 31, -72, 51, -53, 1, 1, 37, 22, -81, 58, -93, 67, 91, -5, -37, -26, 74, 69, -95, -78, -78, -21, 97, 85, -31, -80, -81, 23, 33, -16, 22, -31, -48, 78, 15, -77, 72, 50, -16, -49, -8, 4, 79, 94, -57, -35, 29, -7, 31, 38, 68, 
  -3, 29, 94, -17, -61, -76, 107, -28, 82, -15, 91, 91, 45, 72, -51, 31, -55, -47, 74, -12, -36, -11, 101, 10, 42, 53, 73, 55, 103, 32, -23, -36, -8, -52, 15, -33, -79, 13, 14, 42, 33, 60, 96, -22, -50, -20, 30, 57, -73, 2, -62, 76, 40, 43, 98, 62, 47, -21, 6, -81, 64, 42, -4, 
  -42, -94, 10, -24, 65, -90, -63, -100, -84, 41, -28, -96, 18, 46, -40, 66, 6, -40, 75, -33, 39, 67, -58, 70, 58, -22, 2, -53, 76, -32, -48, 17, -101, 82, 54, 54, 73, -71, -89, -67, -18, 9, -77, -52, -89, -30, 97, 52, -18, 94, 61, -91, -102, 13, -70, -102, -73, 24, -25, 37, -39, -77, -82, 
  45, -86, -41, 14, 105, 122, -60, 115, 14, 44, 39, 38, 79, 16, -26, -79, -111, -28, -92, -51, -89, -61, -2, -24, -21, -76, -42, 87, -13, -5, 7, -114, -91, -107, -26, 10, 27, -25, 61, -45, 74, 32, 104, -82, 64, -35, 1, 84, 122, 80, 56, 68, -46, -23, 113, -21, 26, 75, 57, -5, 0, -36, -19, 
  78, -77, -61, 12, 1, -53, -38, 39, 52, 38, 100, -92, -78, 101, -90, -32, -80, 19, 62, -71, 89, 83, -58, 60, -99, -63, -9, -75, 82, -22, 104, -47, -39, 66, -9, -59, -72, 28, 84, -85, -92, 86, -106, 70, -25, 52, -43, -58, -90, -37, -14, 48, 37, -12, -68, -58, 94, -18, 91, -50, 12, 47, -53, 
  -2, 79, -73, -94, -94, 26, -12, 16, 35, 32, -6, 39, -53, 47, 47, 77, 17, 44, 35, 59, -90, 82, -79, 44, 21, -2, -41, -32, -17, -50, 29, -31, -33, 54, -5, 24, 3, -88, 28, 90, 59, -44, 28, -69, 67, -60, -86, -23, -70, 68, 40, -7, 69, 84, 41, -57, 84, 42, -72, 81, 2, -61, 19, 
  9, -62, -32, -1, 86, -28, -38, -76, 31, -92, -91, -37, 17, 42, -40, 30, -83, -54, 37, -37, -88, -50, 38, -32, 46, -29, -22, 70, -74, 65, 30, -7, 71, -64, -35, -57, 23, -90, -49, -2, -6, -22, 24, 65, -2, -73, 81, -93, -11, -43, 3, -17, -23, -77, -19, -98, -20, -25, 58, -74, -69, 79, -62, 
  -29, 39, 87, 73, 78, -48, -55, 66, 15, -31, -54, 76, -54, 51, -90, -52, -86, 8, 73, -69, 36, -47, -72, 101, -48, -68, -66, 19, -22, -72, -27, -89, -12, 8, -7, 80, 80, -64, 57, -95, -105, -41, 87, -26, 46, -62, 12, 77, -88, 35, -60, -72, 72, 33, 8, -93, 53, -106, -42, -69, 9, -97, 26, 
  -89, -56, 57, -91, 53, 2, -66, -12, -9, -36, -93, -41, -86, -72, -79, -56, 3, -63, -58, 34, -52, 90, -42, 77, -35, -75, -6, -23, -87, -69, 46, -42, -63, -92, 92, 74, 25, -67, -78, -37, -74, 16, -71, 72, 13, -6, 111, 8, -83, -86, 1, -85, 39, -61, 58, -74, -67, -65, -33, 61, -35, -56, -69, 
  -24, 54, 4, -37, -6, -51, 10, -33, 49, 48, -99, 58, 49, -19, -20, -58, -19, -98, -68, 11, -53, -98, 81, -73, 3, 8, -81, -56, 19, 62, -83, -1, 67, -78, -8, 18, -105, 6, -9, -27, -79, -82, 4, 54, 12, -66, -74, 3, -30, -16, 3, 25, -104, 13, 26, -69, 34, -100, -84, 62, -94, 48, -90, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 20,63 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0027227618265897036, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,20 } };
const TfArray<1, float> quant9_scale = { 1, { 0.079451635479927063, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,10 } };
const TfArray<1, float> quant10_scale = { 1, { 0.063347980380058289, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,10 } };
const TfArray<1, float> quant11_scale = { 1, { 0.06475762277841568, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,2 } };
const TfArray<1, float> quant12_scale = { 1, { 0.11042489111423492, } };
const TfArray<1, int> quant12_zero = { 1, { 72 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,2 } };
const TfArray<1, float> quant13_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,8,7 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 9,6,5 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 10,4,3 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 11,2,1 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLiteSoftmaxParams opdata4 = { 1 };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 63, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 1260, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension9, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension10, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension11, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension12, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension13, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
  if (i < 0) {
    tensor->data.data = nullptr;
    tensor->dims = nullptr;
    return;
  }

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 14;
  for (size_t i = 0; i < 14; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 5; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 5; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  13, 
};
TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 5; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
